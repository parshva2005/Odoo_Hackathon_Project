@model List<Question>


@{
    ViewData["Title"] = "Dashboard";
}

<!-- ===================== Dashboard Content ===================== -->
<div class="stackit-dashboard-content stackit-dashboard-centered">
    <!-- ===== Content Filters (Tabs) ===== -->
    <div class="stackit-content-filters">
        <div class="stackit-filter-tabs">
            <button class="stackit-filter-tab active">Latest</button>
            <button class="stackit-filter-tab">Trending</button>
            <button class="stackit-filter-tab">Most Discussed</button>
            <button class="stackit-filter-tab">Unanswered</button>
        </div>
    </div>

    <!-- ===== Question Feed (List of Questions) ===== -->
    <div class="stackit-feed" id="questionFeed">
        foreach(var que in Model){
        <!-- === Question Card 1 === -->
        <div class="stackit-question-card">
            <div class="stackit-question-header">
                <!-- User Name and Post Time -->
                <div class="stackit-question-meta">
                    <div class="stackit-user-name"></div>
                    <div class="stackit-post-time">2 hours ago</div>
                </div>
                <!-- More Options Button -->
                <button class="stackit-more-btn">
                    <i class="fas fa-ellipsis-h"></i>
                </button>
            </div>
            <div class="stackit-question-content">
                <!-- Question Title -->
                <div class="stackit-question-title">How to join 2 columns in a data set to make a separate column in SQL</div>
                <!-- Question Description -->
                <div class="stackit-question-desc">I do not know the code for it as I am a beginner. As an example what I need to do is like there is a column 1 containing First name, and column 2 consists of last name I want a column to combine both names...</div>
                <!-- Tags -->
                <div class="stackit-question-tags">
                    <span class="stackit-tag">#SQL</span>
                    <span class="stackit-tag">#Database</span>
                    <span class="stackit-tag">#Beginner</span>
                </div>
            </div>
            <!-- Question Actions: Like, Comment -->
            <div class="stackit-question-actions">
                <button class="stackit-action-btn">
                    <i class="fas fa-thumbs-up"></i>
                    <span>24</span>
                </button>
                <a href="/Answer/AnswerPage" class="stackit-action-btn">
                    <i class="fas fa-comment"></i>
                    <span>5 answers</span>
                </a>
            </div>
        </div>
        }
        

        
    </div>

    <!-- ===== Pagination (Page Numbers) ===== -->
    <div class="stackit-pagination">
        <button class="stackit-page-btn" id="prevBtn">
            <i class="fas fa-chevron-left"></i>
        </button>
        <span class="stackit-page stackit-page-active" data-page="1">1</span>
        <span class="stackit-page" data-page="2">2</span>
        <span class="stackit-page" data-page="3">3</span>
        <span class="stackit-page" data-page="4">4</span>
        <span class="stackit-page" data-page="5">5</span>
        <button class="stackit-page-btn" id="nextBtn">
            <i class="fas fa-chevron-right"></i>
        </button>
    </div>
</div>

@section Scripts {
    <script>
        // Pagination functionality
        let currentPage = 1;
        const questionsPerPage = 3;
        const totalQuestions = document.querySelectorAll('.stackit-question-card').length;
        const totalPages = Math.ceil(totalQuestions / questionsPerPage);

        function showPage(page) {
            const questions = document.querySelectorAll('.stackit-question-card');
            const startIndex = (page - 1) * questionsPerPage;
            const endIndex = startIndex + questionsPerPage;

            // Hide all questions
            questions.forEach((question, index) => {
                if (index >= startIndex && index < endIndex) {
                    question.style.display = 'block';
                } else {
                    question.style.display = 'none';
                }
            });

            // Update pagination buttons
            updatePaginationButtons(page);
        }

        function updatePaginationButtons(page) {
            const pageButtons = document.querySelectorAll('.stackit-page');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');

            // Update active page
            pageButtons.forEach(btn => {
                btn.classList.remove('stackit-page-active');
                if (parseInt(btn.dataset.page) === page) {
                    btn.classList.add('stackit-page-active');
                }
            });

            // Update navigation buttons
            prevBtn.disabled = page === 1;
            nextBtn.disabled = page === totalPages;

            // Visual feedback for disabled buttons
            if (page === 1) {
                prevBtn.style.opacity = '0.5';
                prevBtn.style.cursor = 'not-allowed';
            } else {
                prevBtn.style.opacity = '1';
                prevBtn.style.cursor = 'pointer';
            }

            if (page === totalPages) {
                nextBtn.style.opacity = '0.5';
                nextBtn.style.cursor = 'not-allowed';
            } else {
                nextBtn.style.opacity = '1';
                nextBtn.style.cursor = 'pointer';
            }
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize first page
            showPage(1);

            // Page number clicks
            document.querySelectorAll('.stackit-page').forEach(btn => {
                btn.addEventListener('click', function() {
                    const page = parseInt(this.dataset.page);
                    if (page !== currentPage) {
                        currentPage = page;
                        showPage(currentPage);
                    }
                });
            });

            // Previous button
            document.getElementById('prevBtn').addEventListener('click', function() {
                if (currentPage > 1) {
                    currentPage--;
                    showPage(currentPage);
                }
            });

            // Next button
            document.getElementById('nextBtn').addEventListener('click', function() {
                if (currentPage < totalPages) {
                    currentPage++;
                    showPage(currentPage);
                }
            });
        });
    </script>
}



